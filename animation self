#include <stdlib.h>
#include <GL/glut.h>
#include <math.h>
float angle = 0; 
void myinit() 
{ 
 glClearColor(0.0, 0.0, 0.0, 1.0); 
 glColor3f(1.0, 0.0, 0.0); 
 glMatrixMode(GL_PROJECTION); //set the zoom factor, aspect ratio and the near and far clipping planes. 
 
 glOrtho(-400.0, 400.0, -400.0, 400.0,-400.0,400.0); //parallel projection l, r, b, t, nearval, farval Specify the 
 // distances to the nearer and farther depth clipping planes 
 glEnable(GL_DEPTH_TEST); // for same level of line/points (earth isdisplayed above orbit not below) 
} 
 
void sun(){ 
 glColor3f(1.0,1.0,0.0);//sun 
 glRotated(angle,0,0,1); // (angle of rotation , x, y, z) 
 glutWireSphere(65.0, 5000, 3); //(radius,slices around z-axis (longitude)(vertical),stacks along z-axis(latitude)(horizontal)) 
 
} 
void earth(){ 
 
 //If the matrix mode is either GL_MODELVIEW or GL_PROJECTION, all objects drawn after a call to glTranslate are translated. 
 //Use glPushMatrix and glPopMatrix to save and restore the untranslated oordinate system. 
 
 glTranslatef(-250, 0, 0); //multiplies the current matrix by a translation matrix. x, y, z (radius of orbit) 
 glColor3f(0.2,0.2,0.7);//earth 
 glutWireSphere(45.0, 2000, 3); 
 glPopMatrix(); 
} 
void orbit(){ 
 glColor3f(0,1,1);//orbit 
 glBegin(GL_LINE_STRIP); 
 for (float x=0; x<=7; x+=0.01) //x for shape. x+ is higher shape is hexagon. x+ is min shape is circle(spline curve) 
 // control points concept 
 { 
 glVertex2f(cos(x)*250,sin(x)*250); //draw lines from points (orbit) 
 } 
 glEnd(); 
 glFlush(); 
 glutPostRedisplay(); // calls display function 
} 
void display() 
{ 
 glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
 angle += 0.2; //can adjust speed 
 glPushMatrix(); 
 sun(); 
 earth(); 
 orbit(); 
} 
int main(int argc, char* argv[]) 
{ 
 glutInit(&argc,argv); 
 glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); //colour mode 
 glutInitWindowSize(1080,1920); //size of window 
 glutInitWindowPosition(0,0); //position of window 
 glutCreateWindow("planet"); 
 glutDisplayFunc(display); 
 myinit(); 
 glutMainLoop(); //calls main loop (to display window) 
return 0; 
}
